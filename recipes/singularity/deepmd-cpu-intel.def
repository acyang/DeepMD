#BootStrap: library
#From: centos:latest
BootStrap: localimage
From: /160GB/images/centos_7.6.1810.sif

%labels
    Author acyang
    Version v0.0.1

%files
    #repo/vbatts-bazel-epel-7.repo /etc/yum.repos.d/
    #repo/conda.repo /etc/yum.repos.d/
    repo/intelproducts.repo /etc/yum.repos.d/
    bazel-0.21.0-dist.zip /root
    answer/tf-1.13.1-cpu /root
    tensorflow-1.13.1.zip /root
    xdrfile-1.1.4.tar.gz /root
    int128_have_intrinsic.inc /root

%post -c /bin/bash
    tf_ver=1.13.1
    bazel_ver=0.21.0
    tensorflow_root=/opt/tensorflow
    xdrfile_root=/opt/xdrfile
    deepmd_root=/opt/deepmd
    deepmd_source_dir=/root/deepmd-kit

    ##Add additional repo to yum
    yum install -y epel-release centos-release-scl

    ###install compiler tool for tensorflow clib
    yum install -y automake autoconf bzip2 cmake cmake3 devtoolset-7-gcc* git gcc gcc-c++ gcc-gfortran libtool make patch scl-utils unzip zip vim wget openmpi3 openmpi3-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-headless eigen3-devel
    ln -s /usr/include/openmpi3-x86_64/ /usr/lib64/openmpi3/include

    source /opt/rh/devtoolset-7/enable

    ###install intel-python and intel-tensorflow
    yum install -y intelpython3

    cd /root
    git clone https://github.com/01org/mkl-dnn.git --depth=1
    cd mkl-dnn/scripts
    ./prepare_mkl.sh
    cd ..
    mkdir -p build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=/opt/intel/mkl-dnn ..
    make -j8
    make install
    export PATH="/opt/intel/intelpython3/bin":${PATH}
    export LD_LIBRARY_PATH="/opt/intel/mkl-dnn/lib64":${LD_LIBRARY_PATH}
    yes | /opt/intel/intelpython3/bin/pip install intel-tensorflow

    ###install bazel
    cd /root
    unzip bazel-${bazel_ver}-dist.zip -d bazel
    cd bazel
    env EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" bash ./compile.sh
    mv output/bazel /usr/bin

    ###Download tensorflow source code
    cd /root
    unzip tensorflow-${tf_ver}.zip 
    mv tensorflow-${tf_ver} tensorflow
    mv /root/tf-${tf_ver}-* /root/tensorflow
    #cd tensorflow
    #sed -i 's/0.21.0/0.26.0/g' configure.py

    mkdir -p $tensorflow_root/{lib,include/tensorflow}
    ###download the dependencies of tensorflow, including Protobuf, Eigen, nsync and absl. This script should be run in the root folder of tensorflow.
    cd /root/tensorflow/
    tensorflow/contrib/makefile/download_dependencies.sh

    ###build Protobuf.
    cd /root/tensorflow/tensorflow/contrib/makefile/downloads/protobuf/
    ./autogen.sh
    ./configure --prefix=/tmp/proto/
    make -j8
    make install
    cp /tmp/proto/lib/libprotobuf.a $tensorflow_root/lib/
    cp -r /tmp/proto/include/* $tensorflow_root/include

    ###build Eigen.
    #cd /root/tensorflow/tensorflow/contrib/makefile/downloads/eigen
    #mkdir build_dir
    #cd build_dir
    #cmake -DCMAKE_INSTALL_PREFIX=/tmp/eigen/ ../
    #make install
    cp -r /usr/include/eigen3/* $tensorflow_root/include

    ###build nsync.
    cd /root/tensorflow/tensorflow/contrib/makefile/downloads/nsync
    mkdir build_dir
    cd build_dir
    cmake -DCMAKE_INSTALL_PREFIX=/tmp/nsync/ ../
    make -j8
    make install
    cp /tmp/nsync/lib64/libnsync.a $tensorflow_root/lib/
    cp -r /tmp/nsync/include/*h $tensorflow_root/include

    cd /root/tensorflow/tensorflow/contrib/makefile/downloads/absl
    bazel build
    rsync -avzh --include '*/' --include '*.h' --exclude '*' absl $tensorflow_root/include/
    mv /root/int128_have_intrinsic.inc $tensorflow_root/include/absl/numeric/

    cd $tensorflow_root/include
    find . -name "*.cc" -type f -delete
    rm -fr /tmp/{proto,eigen,nsync,absl}

    cd /root/tensorflow
    ./configure < tf-${tf_ver}-cpu
    bazel --output_user_root=/tmp/bazel1 build --config=opt --config=mkl --jobs 8 --ram_utilization_factor 80 --copt=-msse4.2 --copt=-mavx --copt=-mavx2 --copt=-mfma --verbose_failures --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" //tensorflow:libtensorflow_cc.so
    cp -r bazel-bin/tensorflow/libtensorflow_* $tensorflow_root/lib/
    cp -r bazel-genfiles/* $tensorflow_root/include/
    cp -r tensorflow/{cc,core} $tensorflow_root/include/tensorflow
    cp -r third_party $tensorflow_root/include

    ###Install xdrfile
    cd /root
    #wget ftp://ftp.gromacs.org/pub/contrib/xdrfile-1.1.4.tar.gz
    tar -zxv -f xdrfile-1.1.4.tar.gz
    cd xdrfile-1.1.4
    ./configure --prefix=$xdrfile_root
    make -j8
    make install

    ###Install deepmd-kit
    cd /root
    git clone https://github.com/deepmodeling/deepmd-kit.git --depth=1
    cd $deepmd_source_dir/source
    mkdir build 
    cd build
    cmake3 -DTF_GOOGLE_BIN=true -DXDRFILE_ROOT=$xdrfile_root -DTENSORFLOW_ROOT=$tensorflow_root -DCMAKE_INSTALL_PREFIX=$deepmd_root ..
    make -j8
    make install
    cp $deepmd_source_dir/data/raw/* $deepmd_root/bin/
    make lammps

    ###Install lammps
    cd /root
    git clone https://github.com/lammps/lammps.git --depth=1
    cd /root/lammps/src
    cp -r $deepmd_source_dir/source/build/USER-DEEPMD .
    make yes-user-deepmd
    make serial -j8
    mkdir -p /opt/lammps/bin
    cp lmp_serial /opt/lammps/bin

    yum clean all
    rm -f /root/bazel-${bazel_ver}-dist.zip /root/tensorflow-${tf_ver}.zip /root/xdrfile-1.1.4.tar.gz
    rm -rf /root/.cache /root/bazel /root/xdrfile-1.1.4
%environment
    tensorflow_root=/opt/tensorflow
    xdrfile_root=/opt/xdrfile
    deepmd_root=/opt/deepmd
    deepmd_source_dir=/root/deepmd-kit
    PATH="/opt/intel/intelpython3/bin":${PATH}
    LD_LIBRARY_PATH="/opt/intel/mkl-dnn/lib64":${LD_LIBRARY_PATH}

