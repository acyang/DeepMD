#BootStrap: library
#From: centos:latest
BootStrap: localimage
From: /160GB/images/centos_7.6.1810.sif

%labels
    Author acyang
    Version v0.0.1

%files
    #repo/vbatts-bazel-epel-7.repo /etc/yum.repos.d/
    repo/conda.repo /etc/yum.repos.d/
    bazel-0.21.0-dist.zip /root
    answer/tf-1.13-cpu /root
    tensorflow-r1.13.zip /root
    xdrfile-1.1.4.tar.gz /root

%post -c /bin/bash
    tf_ver=1.13
    bazel_ver=0.21.0
    tensorflow_root=/opt/tensorflow
    xdrfile_root=/opt/xdrfile
    deepmd_root=/opt/deepmd
    deepmd_source_dir=/root/deepmd-kit
    ##Add additional repo to yum
    yum makecache
    yum install -y epel-release centos-release-scl
    rpm --import /etc/pki/rpm-gpg/RPM*
    rpm --import https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc

    ###install compiler tool for tensorflow clib
    yum install -y automake autoconf bzip2 cmake cmake3 devtoolset-8-gcc* git gcc gcc-c++ gcc-gfortran libtool make patch scl-utils unzip zip vim wget python36 python36-devel python36-libs python36-pip python36-setuptools python36-virtualenv openmpi3 openmpi3-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-headless eigen3-devel conda
    ln -s /usr/include/openmpi3-x86_64/ /usr/lib64/openmpi3/include

    source /opt/rh/devtoolset-8/enable

    ###install bazel from vbatts-bazel-epel-7.repo
    #yum install -y bazel
    ###install bazel-0.21.0 from source. 0.21.0 is the highest version for building tensorflow.
    ###Distribution archive should be used to bootstrap Bazel.
    #wget https://github.com/bazelbuild/bazel/releases/download/${bazel_ver}/bazel-${bazel_ver}-dist.zip
    cd /root
    unzip bazel-${bazel_ver}-dist.zip -d bazel
    cd bazel
    env EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" bash ./compile.sh
    mv output/bazel /usr/bin

    ###Download tensorflow source code
    cd /root
    #git clone https://github.com/tensorflow/tensorflow tensorflow -b "r${tf_ver}" --depth=1
    unzip tensorflow-r${tf_ver}.zip
    mv tensorflow-r${tf_ver} tensorflow
    mv /root/tf-${tf_ver}-* /root/tensorflow

    mkdir -p $tensorflow_root/{lib,include/tensorflow}

    ###download the dependencies of tensorflow, including Protobuf, Eigen, nsync and absl.
    mkdir -p /tmp/{proto,eigen,nsync,absl}
    cd /root/tensorflow
    tensorflow/contrib/makefile/download_dependencies.sh

    ###build Protobuf.
    cd /root/tensorflow/tensorflow/contrib/makefile/downloads/protobuf/
    ./autogen.sh
    ./configure --prefix=/tmp/proto/
    make -j4
    make install
    cp /tmp/proto/lib/libprotobuf.a $tensorflow_root/lib/
    cp -r /tmp/proto/include/* $tensorflow_root/include

    ###build Eigen.
    #cd /root/tensorflow/tensorflow/contrib/makefile/downloads/eigen
    #mkdir build_dir
    #cd build_dir
    #cmake -DCMAKE_INSTALL_PREFIX=/tmp/eigen/ ../
    #make install
    cp -r /usr/include/eigen3/* $tensorflow_root/include

    ###build nsync.
    cd /root/tensorflow/tensorflow/contrib/makefile/downloads/nsync
    mkdir build_dir
    cd build_dir
    cmake -DCMAKE_INSTALL_PREFIX=/tmp/nsync/ ../
    make -j4
    make install
    cp /tmp/nsync/lib64/libnsync.a $tensorflow_root/lib/
    cp -r /tmp/nsync/include/*h $tensorflow_root/include

    cd /root/tensorflow/tensorflow/contrib/makefile/downloads/absl
    bazel build
    rsync -avzh --include '*/' --include '*.h' --exclude '*' absl $tensorflow_root/include/

    cd $tensorflow_root/include
    find . -name "*.cc" -type f -delete
    rm -fr /tmp/proto /tmp/eigen /tmp/nsync

    cd /root/tensorflow
    ./configure < tf-${tf_ver}-cpu
    bazel build --jobs 4 --ram_utilization_factor 50 --copt=-msse4.2 --copt=-mavx --copt=-mavx2 --copt=-mfma --config=opt --verbose_failures --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" //tensorflow:libtensorflow_cc.so
    cp bazel-bin/tensorflow/libtensorflow_cc.so $tensorflow_root/lib/
    cp bazel-bin/tensorflow/libtensorflow_framework.so $tensorflow_root/lib/
    cp -r bazel-genfiles/* $tensorflow_root/include/
    cp -r tensorflow/cc $tensorflow_root/include/tensorflow
    cp -r tensorflow/core $tensorflow_root/include/tensorflow
    cp -r third_party $tensorflow_root/include

    ###Install xdrfile
    cd /root
    #wget ftp://ftp.gromacs.org/pub/contrib/xdrfile-1.1.4.tar.gz
    tar -zxv -f xdrfile-1.1.4.tar.gz
    cd xdrfile-1.1.4
    ./configure --prefix=$xdrfile_root
    make -j4
    make install

    cd /root
    git clone https://github.com/deepmodeling/deepmd-kit.git deepmd-kit
    cd $deepmd_source_dir/source
    mkdir build 
    cd build

    cmake3 -DXDRFILE_ROOT=$xdrfile_root -DTENSORFLOW_ROOT=$tensorflow_root -DCMAKE_INSTALL_PREFIX=$deepmd_root ..

    make -j4
    make install
    cp $deepmd_source_dir/data/raw/* $deepmd_root/bin/

    make lammps
    cd /root
    #git clone https://github.com/lammps/lammps.git --depth=1
    wget https://github.com/lammps/lammps/archive/master.zip
    unzip master.zip
    mv lammps-master lammps
    cd /root/lammps/src
    cp -r $deepmd_source_dir/source/build/USER-DEEPMD .
    make yes-user-deepmd
    make serial -j4
    mkdir -p /opt/lammps/bin
    cp lmp_serial /opt/lammps/bin

    ###install tensorflow in miniconda
    /opt/conda/bin/conda update -y -n base -c defaults conda
    source /opt/conda/etc/profile.d/conda.sh
    conda -V
    conda create -n deepmd_env python=3.6
    conda activate deepmd_env
    conda config --add channels conda-forge
    conda config --get channels
    conda install -c conda-forge -y tensorflow=${tf_ver}

    cd /root
    rm bazel-0.21.0-dist.zip master.zip tensorflow-r1.13.zip xdrfile-1.1.4.tar.gz
    rm -rf /root/.cache
    rm -rf /var/cache/yum/*
%environment
    tensorflow_root=/opt/tensorflow
    xdrfile_root=/opt/xdrfile
    deepmd_root=/opt/deepmd
    deepmd_source_dir=/root/deepmd-kit
    PATH="/opt/conda3/bin:${PATH}"
